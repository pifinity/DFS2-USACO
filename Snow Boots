import java.io.*;
import java.util.*;

class snowboots {
    static int N;
    static int B;
    static int[] path;
    static int[] s;
    static int[] d;
    static boolean[][] check;
    static int min = Integer.MAX_VALUE;

    public static void main(String[] args) throws IOException {
        BufferedReader bf = new BufferedReader(new FileReader("snowboots.in"));
        PrintWriter out = new PrintWriter("snowboots.out");

        StringTokenizer st = new StringTokenizer(bf.readLine());
        N = Integer.parseInt(st.nextToken());
        B = Integer.parseInt(st.nextToken());
        path = new int[N];
        s = new int[B];
        d = new int[B];
        check = new boolean[N][B];

        st = new StringTokenizer(bf.readLine());
        for (int i= 0 ; i<N; i++){
            path[i] = Integer.parseInt(st.nextToken());
        }

        for (int i=0; i<B; i++){
            st = new StringTokenizer(bf.readLine());
            s[i] = Integer.parseInt(st.nextToken());
            d[i] = Integer.parseInt(st.nextToken());
        }

        dfs(0, 0);
        System.out.println(min);

        System.out.println(Arrays.toString(path));
        System.out.println(Arrays.toString(s));
        System.out.println(Arrays.toString(d));
    }

    static void dfs(int curPos, int curBoot){
        if (check[curPos][curBoot])
            return;

        check[curPos][curBoot] = true;

        if (curPos==N-1) {
            min = Math.min(min, curBoot);
            return;
        }

        for (int i = 1; i<= d[curBoot]; i++){
            if (curPos+i<N&& s[curBoot]>=path[curPos+i]){
                System.out.println(curPos+" "+curBoot);
                dfs(curPos+i, curBoot);

            }
        }

        for (int i=curBoot+1; i<B; i++){
            if (d[i]>=path[curPos]){

                dfs(curPos, i);
            }
        }

    }

}
